{"ast":null,"code":"const clientId = '9695df66110c4070ab27fdcb07f9d022';\nconst clientSecret = 'eb859c7faacb4037977fed00a8d04b19';\nconst urlToken = 'https://accounts.spotify.com/api/token';\nconst headersToken = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\nconst body = new URLSearchParams({\n  'grant_type': 'client_credentials',\n  'client_id': clientId,\n  'client_secret': clientSecret\n});\nasync function getToken() {\n  try {\n    const response = await fetch(urlToken, {\n      method: 'POST',\n      headers: headersToken,\n      body: body\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(\"Error:\", error);\n  }\n}\nan;\nasync function getSongs(songTitle) {\n  const urlSearch = 'https://api.spotify.com/v1/search?q=';\n  const trackLimit = '15';\n  const options = '&type=track&limit=';\n  const token = await getToken();\n  const urlToFetch = `${urlSearch}${songTitle}${options}${trackLimit}`;\n  const headersSearch = {\n    'Authorization': `${token.token_type} ${token.access_token}`\n  };\n  try {\n    const response = await fetch(urlToFetch, {\n      method: 'GET',\n      headers: headersSearch\n    });\n    const data = await response.json();\n    return data.tracks.items;\n  } catch (error) {\n    console.error('Error:', error);\n    return [];\n  }\n}\nasync function getPlaylist() {\n  const token = await getToken();\n  const urlToFetch = 'https://api.spotify.com/v1/users/smedjan/playlists';\n  const headersSearch = {\n    'Authorization': `${token.token_type} ${token.access_token}`\n  };\n  try {\n    const response = await fetch(urlToFetch, {\n      method: 'GET',\n      headers: headersSearch\n    });\n    const data = await response.json();\n    console.log(data);\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    return [];\n  }\n}\ngetPlaylist();\nexport default getSongs;","map":{"version":3,"names":["clientId","clientSecret","urlToken","headersToken","body","URLSearchParams","getToken","response","fetch","method","headers","data","json","error","console","log","an","getSongs","songTitle","urlSearch","trackLimit","options","token","urlToFetch","headersSearch","token_type","access_token","tracks","items","getPlaylist"],"sources":["/Users/s.kharlanov/Documents/FnD/github/react/jammming/src/modules/fetch.js"],"sourcesContent":["const clientId = '9695df66110c4070ab27fdcb07f9d022';\nconst clientSecret = 'eb859c7faacb4037977fed00a8d04b19';\nconst urlToken = 'https://accounts.spotify.com/api/token';\nconst headersToken = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n}\n\nconst body = new URLSearchParams({\n  'grant_type': 'client_credentials',\n  'client_id': clientId,\n  'client_secret': clientSecret\n});\n\nasync function getToken () {\n  try {\n    const response = await fetch(urlToken, {\n      method: 'POST',\n      headers: headersToken,\n      body: body\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(\"Error:\", error);\n  }\n}\n\nan\n\n\nasync function getSongs (songTitle) {\n  const urlSearch = 'https://api.spotify.com/v1/search?q=';\n  const trackLimit = '15';\n  const options = '&type=track&limit=';\n  const token = await getToken();  \n  const urlToFetch = `${urlSearch}${songTitle}${options}${trackLimit}`;\n  const headersSearch = {\n    'Authorization': `${token.token_type} ${token.access_token}`\n  }\n  try {\n    const response = await fetch(urlToFetch, {\n      method: 'GET',\n      headers: headersSearch\n    });\n    const data = await response.json();\n    return data.tracks.items;\n  } catch (error) {\n    console.error('Error:', error);\n    return [];\n  }\n}\n\nasync function getPlaylist () {\n  const token = await getToken(); \n  const urlToFetch = 'https://api.spotify.com/v1/users/smedjan/playlists';\n  const headersSearch = {\n    'Authorization': `${token.token_type} ${token.access_token}`\n  }\n  try {\n    const response = await fetch(urlToFetch, {\n      method: 'GET',\n      headers: headersSearch\n    });\n    const data = await response.json();\n    console.log(data)\n    return data;\n  } catch (error) {\n    console.error('Error:', error);\n    return [];\n  }\n}\n\ngetPlaylist();\n\nexport default getSongs;"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAkC;AACnD,MAAMC,YAAY,GAAG,kCAAkC;AACvD,MAAMC,QAAQ,GAAG,wCAAwC;AACzD,MAAMC,YAAY,GAAG;EACnB,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,IAAI,GAAG,IAAIC,eAAe,CAAC;EAC/B,YAAY,EAAE,oBAAoB;EAClC,WAAW,EAAEL,QAAQ;EACrB,eAAe,EAAEC;AACnB,CAAC,CAAC;AAEF,eAAeK,QAAQA,CAAA,EAAI;EACzB,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,QAAQ,EAAE;MACrCO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEP,YAAY;MACrBC,IAAI,EAAEA;IACR,CAAC,CAAC;IACF,MAAMO,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;EAC9B;AACF;AAEAG,EAAE;AAGF,eAAeC,QAAQA,CAAEC,SAAS,EAAE;EAClC,MAAMC,SAAS,GAAG,sCAAsC;EACxD,MAAMC,UAAU,GAAG,IAAI;EACvB,MAAMC,OAAO,GAAG,oBAAoB;EACpC,MAAMC,KAAK,GAAG,MAAMhB,QAAQ,CAAC,CAAC;EAC9B,MAAMiB,UAAU,GAAG,GAAGJ,SAAS,GAAGD,SAAS,GAAGG,OAAO,GAAGD,UAAU,EAAE;EACpE,MAAMI,aAAa,GAAG;IACpB,eAAe,EAAE,GAAGF,KAAK,CAACG,UAAU,IAAIH,KAAK,CAACI,YAAY;EAC5D,CAAC;EACD,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAACe,UAAU,EAAE;MACvCd,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEc;IACX,CAAC,CAAC;IACF,MAAMb,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACgB,MAAM,CAACC,KAAK;EAC1B,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAO,EAAE;EACX;AACF;AAEA,eAAegB,WAAWA,CAAA,EAAI;EAC5B,MAAMP,KAAK,GAAG,MAAMhB,QAAQ,CAAC,CAAC;EAC9B,MAAMiB,UAAU,GAAG,oDAAoD;EACvE,MAAMC,aAAa,GAAG;IACpB,eAAe,EAAE,GAAGF,KAAK,CAACG,UAAU,IAAIH,KAAK,CAACI,YAAY;EAC5D,CAAC;EACD,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAACe,UAAU,EAAE;MACvCd,MAAM,EAAE,KAAK;MACbC,OAAO,EAAEc;IACX,CAAC,CAAC;IACF,MAAMb,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClCE,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;IACjB,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAO,EAAE;EACX;AACF;AAEAgB,WAAW,CAAC,CAAC;AAEb,eAAeZ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}